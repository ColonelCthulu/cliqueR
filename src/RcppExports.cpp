// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// maximum_clique
StringVector maximum_clique(std::string filename);
RcppExport SEXP _cliqueR_maximum_clique(SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(maximum_clique(filename));
    return rcpp_result_gen;
END_RCPP
}
// format_checker
int format_checker(std::string file);
RcppExport SEXP _cliqueR_format_checker(SEXP fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    rcpp_result_gen = Rcpp::wrap(format_checker(file));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_cliqueR_maximum_clique", (DL_FUNC) &_cliqueR_maximum_clique, 1},
    {"_cliqueR_format_checker", (DL_FUNC) &_cliqueR_format_checker, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_cliqueR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
